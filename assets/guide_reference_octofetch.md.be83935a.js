import{o as n,c as e,b as a}from"./app.5b54caf9.js";const t='{"title":"API Reference: OctoFetch","description":"","frontmatter":{},"headers":[{"level":2,"title":"baseUrl(baseUrl: string)","slug":"baseurl-baseurl-string"},{"level":2,"title":"url(url: string)","slug":"url-url-string"},{"level":2,"title":"get(url: string)","slug":"get-url-string"},{"level":2,"title":"post(url: string)","slug":"post-url-string"},{"level":2,"title":"patch(url: string)","slug":"patch-url-string"},{"level":2,"title":"put(url: string)","slug":"put-url-string"},{"level":2,"title":"delete(url: string)","slug":"delete-url-string"},{"level":2,"title":"head(url: string)","slug":"head-url-string"},{"level":2,"title":"options(url: string)","slug":"options-url-string"},{"level":2,"title":"method(method: \\"GET\\" | \\"POST\\" | \\"PATCH\\" | \\"PUT\\" | \\"DELETE\\" | \\"HEAD\\" | \\"OPTIONS\\")","slug":"method-method-get-post-patch-put-delete-head-options"},{"level":2,"title":"header(name: string, value: string)","slug":"header-name-string-value-string"},{"level":2,"title":"headers(headers: HeadersInit)","slug":"headers-headers-headersinit"},{"level":2,"title":"query(name: string, value: string)","slug":"query-name-string-value-string"},{"level":2,"title":"queries(queries: { [key: string]: unknown })","slug":"queries-queries-key-string-unknown"},{"level":2,"title":"path(name: string, value: unknown)","slug":"path-name-string-value-unknown"},{"level":2,"title":"param(name: string, value: unknown)","slug":"param-name-string-value-unknown"},{"level":2,"title":"init(init: RequestInit)","slug":"init-init-requestinit"},{"level":2,"title":"fetch(options?: OctoFetchOptions): Promise<T>","slug":"fetch-options-octofetchoptions-promise-t"},{"level":3,"title":"Options","slug":"options"}],"relativePath":"guide/reference/octofetch.md","lastUpdated":1615118560736}',s={},o=a('<h1 id="api-reference-octofetch"><a class="header-anchor" href="#api-reference-octofetch" aria-hidden="true">#</a> API Reference: OctoFetch</h1><p>The following functions are supported on an <code>OctoFetch</code> instance.</p><h2 id="baseurl-baseurl-string"><a class="header-anchor" href="#baseurl-baseurl-string" aria-hidden="true">#</a> <code>baseUrl(baseUrl: string)</code></h2><p>Set the base URL of the request. This is an URL that will be appended before every request. This can be your domain name or a specific domain name + path.</p><ul><li><code>baseUrl</code>: the base URL</li></ul><h2 id="url-url-string"><a class="header-anchor" href="#url-url-string" aria-hidden="true">#</a> <code>url(url: string)</code></h2><p>Set the URL of the request. This is the URL of the request. If a base URL is provided, it will be appended to that. Will check for double slashes and make sure those are stripped away.</p><ul><li><code>url</code>: the URL/path</li></ul><h2 id="get-url-string"><a class="header-anchor" href="#get-url-string" aria-hidden="true">#</a> <code>get(url: string)</code></h2><p>Make the request a GET request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="post-url-string"><a class="header-anchor" href="#post-url-string" aria-hidden="true">#</a> <code>post(url: string)</code></h2><p>Make the request a POST request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="patch-url-string"><a class="header-anchor" href="#patch-url-string" aria-hidden="true">#</a> <code>patch(url: string)</code></h2><p>Make the request a PATCH request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="put-url-string"><a class="header-anchor" href="#put-url-string" aria-hidden="true">#</a> <code>put(url: string)</code></h2><p>Make the request a PUT request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="delete-url-string"><a class="header-anchor" href="#delete-url-string" aria-hidden="true">#</a> <code>delete(url: string)</code></h2><p>Make the request a DELETE request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="head-url-string"><a class="header-anchor" href="#head-url-string" aria-hidden="true">#</a> <code>head(url: string)</code></h2><p>Make the request a HEAD request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="options-url-string"><a class="header-anchor" href="#options-url-string" aria-hidden="true">#</a> <code>options(url: string)</code></h2><p>Make the request a OPTIONS request. URL has same behaviour as <code>url</code>-function.</p><ul><li><code>url</code>: the URL/path to send a request to</li></ul><h2 id="method-method-get-post-patch-put-delete-head-options"><a class="header-anchor" href="#method-method-get-post-patch-put-delete-head-options" aria-hidden="true">#</a> <code>method(method: &quot;GET&quot; | &quot;POST&quot; | &quot;PATCH&quot; | &quot;PUT&quot; | &quot;DELETE&quot; | &quot;HEAD&quot; | &quot;OPTIONS&quot;)</code></h2><p>Set the method of the request.</p><ul><li><code>method</code>: method of the request</li></ul><h2 id="header-name-string-value-string"><a class="header-anchor" href="#header-name-string-value-string" aria-hidden="true">#</a> <code>header(name: string, value: string)</code></h2><p>Add a header to the request.</p><ul><li><code>name</code>: Name of the header</li><li><code>value</code>: Value for the header with given name</li></ul><h2 id="headers-headers-headersinit"><a class="header-anchor" href="#headers-headers-headersinit" aria-hidden="true">#</a> <code>headers(headers: HeadersInit)</code></h2><p>Add an object of headers to the request. Supports both objects (key: name of header, value: value of header with given name) and Record.</p><ul><li><code>headers</code>: Object with headers. Uses native-fetch <code>HeadersInit</code> type</li></ul><h2 id="query-name-string-value-string"><a class="header-anchor" href="#query-name-string-value-string" aria-hidden="true">#</a> <code>query(name: string, value: string)</code></h2><p>Add a query parameter to the request.</p><ul><li><code>name</code>: Name of the query parameter</li><li><code>value</code>: Value of the query parameter with given name</li></ul><h2 id="queries-queries-key-string-unknown"><a class="header-anchor" href="#queries-queries-key-string-unknown" aria-hidden="true">#</a> <code>queries(queries: { [key: string]: unknown })</code></h2><p>Add an object of query parameters to the request.</p><ul><li><code>queries</code>: Object with queries (key: name of the query parameter, value: value of the query parameter with given name)</li></ul><h2 id="path-name-string-value-unknown"><a class="header-anchor" href="#path-name-string-value-unknown" aria-hidden="true">#</a> <code>path(name: string, value: unknown)</code></h2><p>Replace path parameter placeholders in the url with a value.</p><p>A path placeholder can either be {name} or :name</p><ul><li><code>name</code>: Name of the path parameter placeholder</li><li><code>value</code>: Value to replace the placeholder with</li></ul><h2 id="param-name-string-value-unknown"><a class="header-anchor" href="#param-name-string-value-unknown" aria-hidden="true">#</a> <code>param(name: string, value: unknown)</code></h2><p>Replace a path parameter placeholder in the url with a value.</p><p>Alias for <code>path</code></p><h2 id="init-init-requestinit"><a class="header-anchor" href="#init-init-requestinit" aria-hidden="true">#</a> <code>init(init: RequestInit)</code></h2><p>Set the default parameters for the internal <code>fetch</code>.</p><p>Only use this when the option is not provided by the API, or for more finegrained control over the request options.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Values set here will be overwritten by the counterpart chain function. This acts as a default value.</p></div><h2 id="fetch-options-octofetchoptions-promise-t"><a class="header-anchor" href="#fetch-options-octofetchoptions-promise-t" aria-hidden="true">#</a> <code>fetch(options?: OctoFetchOptions): Promise&lt;T&gt;</code></h2><p>Fetch the data with the constructed request options.</p><p>When calling the <code>fetch()</code> function at the end of the chain, a fetch request will execute and <strong>return a promise</strong> with the following properties:</p><ul><li><strong>Will resolve</strong>: when a 2XX, 1XX, 3XX status code occurs. <ul><li><strong>Result</strong>: the data, as Javascript Object, as transformed by the correct <a href="/guide/transformers.html">transformer</a></li></ul></li><li><strong>Will reject</strong>: when a 4XX-5XX or network error occurs. <ul><li><strong>Error</strong>: instance of <a href="/guide/reference/octoerror.html">OctoError</a></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is the <strong>same behaviour</strong> as <a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a>, but will use the browser&#39;s native fetch API under the hood.</p></div><h3 id="options"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p>You can provide some options to the <code>fetch</code> function to alter its behaviour.</p><h4 id="native-boolean"><a class="header-anchor" href="#native-boolean" aria-hidden="true">#</a> <code>native: boolean</code></h4><p>You can provide the option <code>native: true</code> to alter the promise resolve/reject behaviour to act like the browser&#39;s native fetch behaviour:</p><ul><li><strong>Will resolve</strong>: when a response is received from the server (2XX, 4XX, 5XX, ...)</li><li><strong>Will reject</strong>: when an network error occurs.</li></ul><p>The received data from the promise will be the same with this option on.</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id/:version&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token comment">// `native: true` will use the same promise behaviour as browser native fetch.</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> native<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `Error`</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="response-boolean"><a class="header-anchor" href="#response-boolean" aria-hidden="true">#</a> <code>response: boolean</code></h4><p>You can provide the option <code>response: true</code> to both return the data and the native fetch <code>Response</code>. The fetch result will return a list with:</p><ul><li>0: data, as provided without this option</li><li>1: <code>Result</code> from native fetch</li></ul><p>The return type will be <code>Promise&lt;[T, Response]&gt;</code></p><p>You can use it as following:</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>project<span class="token punctuation">,</span> response<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received project </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `Error`</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Or using <strong>async/await syntax</strong>:</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>project<span class="token punctuation">,</span> response<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received project </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This destructuring notation works the same way as the <code>useState</code> hook in React.</p></div>',76);s.render=function(a,t,s,p,c,r){return n(),e("div",null,[o])};export default s;export{t as __pageData};
