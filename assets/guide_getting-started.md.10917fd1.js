import{o as n,c as s,b as a}from"./app.5b54caf9.js";const t='{"title":"Getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Constructing","slug":"constructing"},{"level":2,"title":"Building","slug":"building"},{"level":2,"title":"Fetching","slug":"fetching"},{"level":3,"title":"fetch()","slug":"fetch"},{"level":3,"title":"fetch(options: OctoFetchOptions)","slug":"fetch-options-octofetchoptions"},{"level":2,"title":"TypeScript support","slug":"typescript-support"}],"relativePath":"guide/getting-started.md","lastUpdated":1615116307418}',o={},p=a('<h1 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h1><h2 id="constructing"><a class="header-anchor" href="#constructing" aria-hidden="true">#</a> Constructing</h2><p>To fetch data from an API you have to build an instance of the <code>OctoFetch</code>-object. This can easily be done by using the factory function that is the default export:</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Calling this function will create a new <code>OctoFetch</code> object, allowing you to construct and execute a fetch request.</p><h2 id="building"><a class="header-anchor" href="#building" aria-hidden="true">#</a> Building</h2><p>After creating an instance, you can simply call any of the class-members to <strong>construct the request</strong>. You can find a full list of available functions <a href="/guide/reference/octofetch.html">here</a>.</p><p>You can use <strong>multiple options</strong> just by calling them on the result of the previous option.</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> searchQuery<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer my-secret-authentication-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can find a full list of available functions <a href="/guide/reference/octofetch.html">here</a>.</p></div><h2 id="fetching"><a class="header-anchor" href="#fetching" aria-hidden="true">#</a> Fetching</h2><p>Once the request is configured, you can fetch the data.</p><h3 id="fetch"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> <code>fetch()</code></h3><p>When calling the <code>fetch()</code> function at the end of the chain, a fetch request will execute and <strong>return a promise</strong> with the following properties:</p><ul><li><strong>Will resolve</strong>: when a 2XX, 1XX, 3XX status code occurs. <ul><li><strong>Result</strong>: the data, as Javascript Object, as transformed by the correct <a href="/guide/transformers.html">transformer</a></li></ul></li><li><strong>Will reject</strong>: when a 4XX-5XX or network error occurs. <ul><li><strong>Error</strong>: instance of <a href="/guide/reference/octoerror.html">OctoError</a></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is the <strong>same behaviour</strong> as <a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">Axios</a>, but will use the browser&#39;s native fetch API under the hood.</p></div><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id/:version&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">project</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> project<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `EchoError`</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="fetch-options-octofetchoptions"><a class="header-anchor" href="#fetch-options-octofetchoptions" aria-hidden="true">#</a> <code>fetch(options: OctoFetchOptions)</code></h3><p>You can provide some options to the <code>fetch</code> function to alter its behaviour.</p><h4 id="native-boolean"><a class="header-anchor" href="#native-boolean" aria-hidden="true">#</a> <code>native: boolean</code></h4><p>You can provide the option <code>native: true</code> to alter the promise resolve/reject behaviour to act like the browser&#39;s native fetch behaviour:</p><ul><li><strong>Will resolve</strong>: when a response is received from the server (2XX, 4XX, 5XX, ...)</li><li><strong>Will reject</strong>: when an network error has occurred.</li></ul><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id/:version&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token comment">// `native: true` will use the same promise behaviour as browser native fetch.</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> native<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `Error`</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="response-true"><a class="header-anchor" href="#response-true" aria-hidden="true">#</a> <code>response: true</code></h4><p>You can provide the option <code>response: true</code> to both return the data and the native fetch <code>Response</code>. The fetch result will return a list with:</p><ul><li>0: data, as provided without this option</li><li>1: <code>Result</code> from native fetch</li></ul><p>You can use it as following:</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>project<span class="token punctuation">,</span> response<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received project </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `Error`</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Or using <strong>async/await syntax</strong>:</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>project<span class="token punctuation">,</span> response<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n\n    <span class="token comment">// Call `fetch` to execute a request</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Received project </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>project<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This destructuring notation works the same way as the <code>useState</code> hook in React.</p></div><h2 id="typescript-support"><a class="header-anchor" href="#typescript-support" aria-hidden="true">#</a> TypeScript support</h2><p>OctoFetch has great support for TypeScript.</p><p>When using <strong>TypeScript</strong> the return type of the data can be provided as follows:</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&quot;/location/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// You can specify the type here using the `&lt;type&gt;` notation</span>\n    <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">fetch</span><span class="token generic class-name"><span class="token operator">&lt;</span>Location<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// Data is transformed into an object.</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">[</span>location<span class="token punctuation">]</span> <span class="token operator">=&gt;</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Location found: (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>location<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>location<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token comment">// Error is of type `EchoError`</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Or you can utilize TypeScript&#39;s <strong>type interference</strong>:</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> location<span class="token operator">:</span> Location <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v2&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&quot;/location/:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',37);o.render=function(a,t,o,e,c,u){return n(),s("div",null,[p])};export default o;export{t as __pageData};
