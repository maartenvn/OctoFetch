import{o as n,c as s,b as a}from"./app.5b54caf9.js";const t='{"title":"About","description":"","frontmatter":{},"headers":[{"level":2,"title":"How does it work","slug":"how-does-it-work"},{"level":2,"title":"Why does it exist","slug":"why-does-it-exist"},{"level":3,"title":"OctoFetch approach","slug":"octofetch-approach"},{"level":3,"title":"Axios approach","slug":"axios-approach"}],"relativePath":"about/index.md","lastUpdated":1615116307418}',p={},o=a('<h1 id="about"><a class="header-anchor" href="#about" aria-hidden="true">#</a> About</h1><h2 id="how-does-it-work"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work</h2><p>OctoFetch is a thin layer on top of the browser native Fetch API, which is supported in all modern browsers and polyfilled by most tools such as Nuxt.js, Next.js, create-react-app, vue-cli, etc. It allows for much less boilerplate and more reusable code.</p><p>OctoFetch is made for browser, but can be used in Node.JS using the package <a href="https://www.npmjs.com/package/isomorphic-fetch" target="_blank" rel="noopener noreferrer"><code>isomorphic-fetch</code></a> for polyfilling the native Fetch API.</p><h2 id="why-does-it-exist"><a class="header-anchor" href="#why-does-it-exist" aria-hidden="true">#</a> Why does it exist</h2><p>There are other fetch libraries, such as Axios, for fetching data from APIs. Howerver, OctoFetch offers a <strong>much more readable and maintainable approach</strong> that can <strong>shave down on unnecessary boilerplate</strong> and offers a much <strong>more flexible API</strong>.</p><p>Don&#39;t take my word for it, just look at the example below:</p><h3 id="octofetch-approach"><a class="header-anchor" href="#octofetch-approach" aria-hidden="true">#</a> OctoFetch approach</h3><div class="language-javascript"><pre><code><span class="token keyword">import</span> octofetch <span class="token keyword">from</span> <span class="token string">&quot;octofetch&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">octofetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v1&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer eze48zeka!78ez!@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// First request.</span>\napi<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Elon Musk&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">users</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Second request.</span>\napi<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/projects/:id/info&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json+ld&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">project</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>project<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>As you can see, OctoFetch&#39;s API allows to shave down on boilerplate by re-using specific code and compacting the space taken by the code.</p><h3 id="axios-approach"><a class="header-anchor" href="#axios-approach" aria-hidden="true">#</a> Axios approach</h3><p>Now let&#39;s do the same thing in the popular fetch library Axios:</p><div class="language-javascript"><pre><code><span class="token comment">// First request.</span>\naxios\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v1/users&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        params<span class="token operator">:</span> <span class="token punctuation">{</span>\n            q<span class="token operator">:</span> <span class="token string">&quot;Elon Musk&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n        headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            Token<span class="token operator">:</span> <span class="token string">&quot;Bearer eze48zeka!78ez!@&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        users <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Second request.</span>\naxios\n    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.dev/api/v1/projects/&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;/info&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n            Token<span class="token operator">:</span> <span class="token string">&quot;Bearer eze48zeka!78ez!@&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json+ld&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>As you can see, we are using some duplicate code here. Axios does allow for code re-usability using interceptors, but that API also includes a lot of boilerplate by itself.</p>',14);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
